현재 지정된 선택자의 자손 노드를 가로배치하는 방법

flex-wrap : nowrap ; --> 자손 노드의 사이즈가 
부모 노드보다 크면 크기를 부모 노드 크기로 자동 조정

flex-wrap : wrap; --> 자손 노드의 사이즈가 부모 노드보다
크면 부모 노드를 자손 노드 크기로 자동 조정

flex-wrap : flex-reverse ; --> 순서 뒤집기

flex-direction : row 등의 속성 ; --> 자손 노드의 배치방법을 지정
    - row : 가로 배치(기본값, 생략 가능)
    - colum : 세로 배치

--> 위치를 배치하고 싶은 노드의 바로 윗 부모 노드에 적용해야함

justify-content : flex 자손 노드의 가로 정렬
    - flex-start : 왼쪽 정렬 (기본값)
    - flex-end : 오른쪽 정렬
    - center : 가운데 정렬
    - space-between : 동일한 규격의 여백이 생기도록 정렬(앞, 뒤 여백 X)
    - space-around : 동일한 규격의 여백이 생기도록 정렬(앞, 뒤 여백O)
    - space-exenly
alingn-items : flex 자손 노드의 세로 정렬
    - stretch : 자식 노드들이 고정크기가 아니라면(height를 지정하지 않았다면) 
                자동으로 부모노드의 높이로 늘림(기본값)
    - center : 자식 노드 각각 가지고 있는 높이 기준으로 부모 노드의 세로 가운데 정렬
    - flex-end : 자식 노드가 부모 노드의 아래 변로 정렬
    - flex-start : 자식 노드가 부모 노드의 윗 변으로 정렬 
    (stretch와 다르게 자식노드가 고정크기가 없더라도 부모 노드의 높이만큼 늘리지 않음)

[레이아웃] --> 구성 요소들을 효과적으로 배열하는 작업
- 일반적인 기본 레이아웃 -
1. header : 로고, 메인메뉴, 검색
2. 본문 : 홈페이지 본문 
3. 푸터 : 회사정보, 네비(홈페이지의 링크 모음)
- 레이아웃 시작 전 CSS 전 작업 - 
1. 첫 단계에서는 각 구역의 위치가 안 보이기 때문에 css에 border를 눈에 보이도록 지정해주기
    (작업 종료 후 삭제하기)
2. margin과 padding을 0으로 초기화해주기 (여백을 직접 지정하기 위해)
3. box-sizing으로 모델 크기의 기준 설정해주기
    - content-box(기본값) : 테두리 전(컨텐츠) 기준으로 width와 height 사이즈 지정
    - border-box : 테두리까지(컨텐츠 + 테두리 + padding) 기준으로 width와 height 사이즈 지정

4. 페이지 전체 사이즈 지정 : 보통 PC 기준 width 1100~1300px
--> 보통 페이지는 컨텐츠가 계속해서 추가 되기 때문에 height를 지정하지 않음
5. margin: 0 auto; : 컨텐츠 중앙 정렬

★ 보통 id는 레이아웃 큰 틀(header, main, footer)에서만 사용 --> 단일 적용만 가능하기 때문