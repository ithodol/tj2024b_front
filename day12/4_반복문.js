// [1] cuntinue; : 가장 가까운 for문의 증감식으로 코드 흐름 이동
    for(let i = 1; i <= 5; i++){ // i는 1부터 5이하까지 1씩 증가 반복
        // 만약에 i가 3이면
        if(i == 3){continue;} //코드 흐름이 continue를 만나면 가장 가까운 증감식으로 이동
        // 즉, continue 이후 코드는 실행되지 않음
        console.log(i); // 출력 => 1 2 x 4 5
    }

// [2] break; : 가장 가까운 for문의 { } 종료/탈출/끝내가
    for(let i = 1; i <= 10; i++){ // i는 1부터 10이하까지 1씩 증가 반복
        if(i == 5){break;} // 코드흐름이 break를 만나면 가장 가까운 반복문 종료
        // 즉, break 이후 반복문 코드는 실행되지 않음
        console.log(i); // 출력 => 1 2 3 4 x 
    }
// [3] 무한루프 : 종료되는 조건 없이 계속적으로 반복되는 구조 -> 메모리 과부하
    // for(; ;){console.log('무한출력');}

/*
    (실습1) 6개의 정수를 입력받아 하나의 배열에 저장하시오.
            - 조건1 : 배열내 중복은 없어야 한다.    
            - 조건2 : 배열내 값의 갯수가 6개가 되면 프로그램을 종료한다.
*/
    // 방법1
    // for(let i = 1; i <=6; i++){ } ...

    // 방법2 무한루프
    let numArray = []; // 입력받은 데이터를 저장하는 배열 선언
    for(;;){
        // (1) 무한입력
        let num = Number(prompt(`${numArray.length+1}번째 수 입력 : `))
        // (2) 처리 : 중복검사 -> 배열저장 -> 갯수체크
            // 1. 중복검사 .indexOf() : 배열 내 찾을 데이터가 존재하면 인덱스 번호 반환, 존재하지 않으면 -1 반환
        if(numArray.indexOf(num) != -1){ // 만약 배열내 입력받은 값이 존재하면 
            alert('중복입니다.'); // alert() 알람 메세지 함수
            continue; // 가장 가까운 for문의 증가식으로 이동 // 아래 코드는 실행되지 않는다.
        }
            // 2. 배열저장 .push(새로운값) : 배열 내 마지막인덱스에 새로운 값 추가 함수
        numArray.push(num);
            // 3. 갯수체크 .length : 배열내 요소의 갯수 / 총 길이 반환 속성
        if(numArray.length >= 6){ // 만약 배열의 총길이(요소갯수)가 6개 이상이면 
            break; // 가장 가까운 for문의 { }를 종료한다. -> for 강제 종료/탈출
        }
    }
        // break 여기로 이동
    console.log(numArray);