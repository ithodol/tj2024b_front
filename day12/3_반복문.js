// [1] for 중첩
    // i는 3번 반복, j는 5번 반복 => 총 i의 출력횟수 : 3번, 총 j의 출력횟수 : 15번
    // 즉, 상위 for문이 1회전마다 하위 for문은 전체 회전한다
    for(let i = 1; i <= 3; i++){
        // i는 1부터 3이하까지 1씩 증가한다.
        console.log(i);

        for(let j = 1; j <=5 ; j++){ // j는 1부터 5이하까지 1씩 증가한다.
            console.log(`---> ${ j }`)
        }
}

// [2] 구구단 2~9단 만들기
// [반복문 없이]
    console.log(`2 X 1 = ${ 2 * 1 }`)
    console.log(`2 X 1 = ${ 2 * 2 }`)
    console.log(`2 X 1 = ${ 2 * 3 }`)
    console.log(`2 X 1 = ${ 2 * 4 }`)
    console.log(`2 X 1 = ${ 2 * 5 }`)
    console.log(`2 X 1 = ${ 2 * 6 }`)
    console.log(`2 X 1 = ${ 2 * 7 }`)
    console.log(`2 X 1 = ${ 2 * 8 }`)
    console.log(`2 X 1 = ${ 2 * 9 }`)
// [반복문 코드]
// 곱 패턴 : 1부터 9까지 1씩 증가
    for(let 곱 = 1 ; 곱 <=9; 곱++){
        console.log(`2 X ${곱} = ${2*곱}`)
    }
// 단 패턴 : 2부터 9까지 1씩 증가
    for(let 단 = 2; 단 <= 9; 단++){
        console.log(`${단} X 1 = ${단 * 1}`)
    }
// (1) 곱마다 단 실행, (2) 단마다 곱 실행 => 단(상위) 곱(하위)
// 단 1번마다 곱은 전체 실행
    for(let 단 = 2; 단 <= 9; 단++){ // for1 st
        for(let 곱 = 1 ; 곱 <=9; 곱++){ // for2 st
            console.log(`${ 단 } X ${ 곱 } = ${ 단 * 곱 }`)
        } // for2 end
    } // for1 end


/* [3] 별모양 출력하기, 입력받은 줄 수 만큼
    ex) 5를 입력했을 경우 아래와 같이 5줄의 직각삼각형 출력.
            줄      별          
    *       1       1           1부터 1까지
    **      2       1 2         1부터 2까지
    ***     3       1 2 3       1부터 3까지
    ****    4       1 2 3 4     1부터 4까지
    *****   5       1 2 3 4 5   1부터 5까지
    줄패턴 : 1부터 5까지 1씩 증가 반복, 줄바꿈 \n(이스케이프/제어문자)
    별패턴 : 1부터 현재 줄 수까지 1씩 증가 반복

*/
/*
    for(let 별 = '*'; 별 <= '*****'; 별++){
        for(let 별2 = '*'; 별 <='*****'; 별++){
            console.log(`${별} ${별2}`);
        }
    }
*/

let 줄갯수 = Number(prompt('줄 수 : ')) //출력할 줄의 갯수
let out = ''; // 출력할 데이터를 모아두는 변수
for(let line = 1; line <= 줄갯수; line++){
    for(let star = 1; star <= line; star++){
        out += '*'
    }out += '\n' //줄바꿈 \n(이스케이프/제어문자)
} // for1 end
// --> 줄 안에 별 포함?  vs  별 안에 줄 포함?
//      => 줄 안에 별 포함
console.log(out)