/*
    실습 : 비회원제 게시판 구현하기
    [요구사항]
        - 하나의 HTML에서 작업

        1. 게시물 등록 : 제목, 내용, 비밀번호 입력받아 등록 처리
        2. 게시물 전체 출력 : 날짜, 제목, 조회수 순으로 전체 게시물을 출력
        3. 게시물 (1개)상세 출력 : 전체 출력화면에서 특정한 제목 클릭시 클릭한 게시물의 상세정보 띄우기
            - 상세 정보 : 날짜, 제목, 조회수, 내용 / 조회수 : 상세정보 조회수 1증가
        4. 게시물 삭제 : 상세 출력 화면에서 삭제 버튼 클릭시 비밀번호를 입력받아 일치하면 삭제 처리
        5. 게시물 수정 : 상세 출력 화면에서 수정 버튼 클릭시 비밀번호를 입력받아 일치하면 새로운 내용을 입력받아 수정 처리

    [CRUD]
        C(create)등록       : 회원가입, 제품 등록, 게시물 쓰기, 쪽지 보내기
        R(read)출력         : 마이페이지, 제품 목록, 게시물 목록, 받은 쪽지 보기
        U(update)수정       : 회원 수정, 제품 수정, 게시물 수정, 쪽지 읽은 상태 수정
        D(delete)삭제       : 회원탈퇴, 제품 삭제, 게시물 삭제, 쪽지 삭제
    
    [개발순서]
        1. HTML : 와이어프레임/프로토타입 구성
        2. JS : 구성된 화면과 요구사항에서 필요한 메모리/데이터 구성
        3. JS : 요구사항에 따라 구현할 기능/함수 구성, 함수별 비즈니스로직 구성
        4. HTML, JS 연동
        5. 테스트
        6. 유지보수

    [1] HTML 구성
    [2] 구현할 페이지 메모리 구성
        - 제목, 내용, 비밀번호, 작성일, 조회수 필드값을 기록/저장
        - 하나의 게시물로 묶음 : 제목, 내용, 비밀번호, 작성일

        (방법1)*비추* 각 속성별 배열을 선언한다
        let 제목목록 = ['첫번째 게시물 제목', '두번째 게시물 제목', '세번째 게시물 제목']
        let 내용목록 = ['첫번째 게시물 내용', '두번째 게시물 내용', '세번째 게시물 내용']
        let 비밀번호목록 = ['1234', '4567', '7891']
        let 작성일목록 = ['2024-11-26', '2024-11-27', 2024-11-28']
        let 조회수목록 = ['3', '2', '0']

        (방법2) 각 속성별 하나의 문자열로 구성하여 구성된 문자열을 하나의 배열에서 관리한다
            CSV란? : 여러개의 값들을 쉼표(,)로 구분한 텍스트(문자열)
                - 주의할 점 : 데이터 자체에 ,가 존재하면 문제가 발생할 수 있다
                - 배열의 요소 쉼표(,) / CSV의 쉼표(,) 구분해야함
                - 값을 다시 구분할 때는 문자열 함수, 문자열.split(',')이용한 분해 가능
            첫번재게시물 : '첫번째 게시물 제목,첫번째 게시물 내용,1234,2024-11-26,3'
            두번재게시물 : '두번째 게시물 제목,두번째 게시물 내용,4567,2024-11-27,2'
            세번재게시물 : '세번째 게시물 제목,세번째 게시물 내용,7891,2024-11-28,0'

            (1) 하나의 문자열(게시물)을 여러개 구성하여 배열 저장
            let 게시물목록 = ['첫번째 게시물 제목,첫번째 게시물 내용,1234,2024-11-26,3',
                            '두번째 게시물 제목,두번째 게시물 내용,4567,2024-11-27,2',
                            '세번째 게시물 제목,세번째 게시물 내용,7891,2024-11-28,0']

            (2) 하나의 문자열(게시물)들을 \n으로 구분하여 또 하나의 문자열에 구성
            let 게시물목록 = '첫번째 게시물 제목,첫번째 게시물 내용,1234,2024-11-26,3\n
                            두번째 게시물 제목,두번째 게시물 내용,4567,2024-11-27,2\n
                            세번째 게시물 제목,세번째 게시물 내용,7891,2024-11-28,0'

    [3] 함수/기능 구성
        1. 등록함수 : [등록] 버튼 클릭시 입력받은 3개 값(제목,내용,비밀번호)를 JS로 가져와서 배열에 저장
                    .push
        2. 출력함수 : 배열 변화(최초실행1번/등록/삭제/수정)가 있을 경우 배열내 모든 정보(게시물)를 출력하는 함수
                    .length
        3. 삭제함수 : [삭제]버튼 클릭시 비밀번호를 입력받아서 현재 상세 게시물의 비밀번호와 일치하면 배열내 해당 게시물 삭제 함수
                    .splice
        4. 수정함수 : [수정]버튼 클릭시 비밀번호를 입력받아서 현재 상세 게시물의 비밀번호와 일치하면 새로운 내용을 입력받아 해당 게시물 내용 수정 함수
                    배열명[index]=새로운값




*/
// [1] 게시물들을 관리할 배열 선언, 3개정도 샘플 데이터 초기화, 전역변수(js가 실행될 때 1번 선언) vs 지역변수 {}가 실행될 때마다 선언
let 게시물목록 = ["첫번째 게시물 제목,첫번째 게시물 내용,1234,2024-11-26,3",
                "두번째 게시물 제목,두번째 게시물 내용,4567,2024-11-27,2",
                "세번째 게시물 제목,세번째 게시물 내용,7891,2024-11-28,0"]



// [2] 등록함수 , 실행조건 : [등록]버튼 클릭시
function 등록함수(){ console.log('등록함수 실행');
    // 1. 입력/저장 : document.querySelector('선택자').value
        // 각 class별 input 마크업에 입력된 값 가져오기
    let title = document.querySelector('.title').value; //console.log(title);
    let content = document.querySelector('.content').value; //console.log(content);
    let password = document.querySelector('.password').value; //console.log(password);

    // 2. 처리 : 입력받은 값들과 날짜/조회수를 하나의 문자열(CSV)구성 -> 배열 저장 .push
        // (1) 사용자에게 입력받지 않고 로직에서 초기화해주는 변수
    // 원하는 날짜 또는 시간 구성하기
        // 현재 날짜/시간 기능을 제공하는 객체를 변수에 저장
        let nowDate = new Date() 
        let nowYear = nowDate.getFullYear(); // 현재 연도 
        let nowMonth = nowDate.getMonth()+1; // 현재 월 (+1 하는 이유 : 0부터 시작하기 때문 1월(0)~12월(11))
        let nowDay = nowDate.getDate(); // 현재 일
        
    let date = `${nowYear}-${nowMonth}-${nowDay}`; // 작성일, 일반적으로 게시물 등록시 현재 시스템 날짜를 사용
    console.log(date);

    let view = 0 // 조회수, 일반적으로 게시물 등록시 게시물 조회수는 0부터 시작
    //console.log(view);
        // (2) 5개의 변수들을 하나의 (CSV형식)문자열로 구성

    let board = `${title},${content},${password},${date},${view}`// `백틱 문자열 탬플릿
    //console.log(board);

        // (3) 구성된 CSV문자열을 배열 저장
    게시물목록.push(board);
    //console.log(게시물목록);


    // 3. 출력 : 출력함수 실행
    출력함수(); // 변수호출 : 변수명 , 함수호출 : 함수명()

} // f end


// [3] 출력함수, 실행조건 : js열렸을 때 최초 1번 실행, 등록/삭제/수정 처리 성공시 실행
출력함수(); // js가 실행될 때 최초 1번만 실행 *필수는 아님*
function 출력함수(){

    // (1) 어디에 : table > tbody , document.querySelector(선택자)
    let tbody = document.querySelector('table > tbody')

    // (2) 무엇을 : 배열 요소들의 정보를 html 구성해서
    let html = ''
        // 배열내 요소 순화(배열내 모든 요소를 반복해서 하나씩 꺼내기)
        for(let index = 0; index <= 게시물목록.length -1; index++){
            // index는 0부터 마지막인덱스까지 1씩 증가 반복
            let board = 게시물목록[index]; // 하나의 게시물
            // 하나의 게시물을 CSV로 구성했기 때문에 게시물 정보 분해(분리)
            // 분해함수 - 문자열.split('기존문자') 문자열내 기준문자로 분해해서 분해된 결과를 배열 반환 함수

            let info = board.split(',') // CSV형식은 쉼표(,)로 구분했기 때문에 쉼표(,)로 다시 분해한다
                // info[0] = 제목, info[1] = 내용, info[2] = 비밀번호, info[3] = 날짜, info[4] = 조회수
            // 각 정보들을 HTML과 연동해서 작성
            html += `<tr> 
                        <td>${info[3]}</td>
                        <td> <a href="#" onclick="상세출력함수(${index})">${info[0]}</a> </td>
                        <td>${info[4]}</td>
                    </tr>` // 변수 +=값  vs  변수 = 변수 + 값, 기존 변수에 새로운 값을 누계/연결
        }

    // (3) 출력 , .innerHTML
    tbody.innerHTML = html; // 변수 = 새로운값 , .변수 = 새로운값
} // f end


// [3-1] 상세 출력 함수 , 실행조건 : 전체출력화면에서 특정한 제목을 클릭했을 때
function 상세출력함수(index){ // index : 매개변수, 상세 출력할 배열의 인덱스를 받기
    console.log('상세출력함수 실행'); console.log(index);

    // (1) 어디에 : document.querySelector()

    // (2) 무엇을 : 배열 정보를 HTML로 구성, 선택한 게시물 인덱스의 정보를, index
    let board = 게시물목록[index]; // 선택한 인덱스의 게시물 호출
    let info = board.split(','); // 게시물 문자열 쉼표(,) 기준으로 분해
        // info[0] = 제목, info[1] = 내용, info[2] = 비밀번호, info[3] = 날짜, info[4] = 조회수

    // (3) 출력 : .innerHTML
    document.querySelector('.titleBox').innerHTML = info[0]; // 제목 데이터를 .titleBox 마크업에 사이에 대입
    document.querySelector('.contentBox').innerHTML = info[1]; // 내용 데이터를 .contentBox 마크업에 사이에 대입
    document.querySelector('.dateBox').innerHTML = info[3]; // 작성일 데이터를 .dateBox 마크업에 사이에 대입
    document.querySelector('.viewBox').innerHTML = info[4]; // 조회수 데이터를 .viewBox 마크업에 사이에 대입
} // f end




// [4] 삭제함수 , 실행조건 : [삭제]버튼 클릭시
function 삭제함수(){

} // f end




// [5] 수정함수 , 실행조건 : [수정]버튼 클릭시
function 수정함수(){

} // f end

